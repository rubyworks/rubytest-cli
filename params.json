{"name":"Ruby Test CLI","tagline":"Command-line Interface for Ruby Test","body":"# Ruby Test CLI\r\n\r\nCommand line interface for running tests for RubyTest-based\r\ntest frameworks.\r\n\r\n[Website](http://rubyworks.github.com/rubytest-cli) /\r\n[Support](http://github.com/rubyworks/rubytest-cli/issues) /\r\n[Development](http://github.com/rubyworks/rubytest-cli)\r\n\r\n\r\n## Usage\r\n\r\nThe rubytest command-line tool follows many of the usual conventions\r\nso it's use is farily straightforward. The `-h/--help` option is \r\navailable to detail all its options. Here is a basic example of usage. \r\n\r\n    $ rubytest -Ilib test/*_test.rb\r\n\r\nThis would add `lib` to Ruby's $LOAD_PATH and then load all the \r\ntest files matching the `test/*_test.rb` glob.\r\n\r\nWhen running tests, you need to be sure to load in your test framework\r\nor your framework's Ruby Test adapter. This is usually done via a helper\r\nscript in the test files, but might also be done via command line options,\r\ne.g.\r\n\r\n    $ rubytest -r lemon -r ae test/test_*.rb\r\n\r\nOf course, it can become tedious having to type such a long command\r\nover and over. One way to handle this is to use an a *runtime adjunct tool*\r\nlike [DotOpts](http://rubyworks.github.com/dotopts). For example, a project\r\nmight add a `.opts` file with the entry:\r\n\r\n    rubytest\r\n      -f progress\r\n      -r spectroscope\r\n      -r rspecial\r\n      spec/spec_*.rb\r\n\r\nThat will work in many cases, but to make things <u>solid</u> Ruby Test\r\nsupports default pre-configuration files. To use, add an `etc/test.rb` file\r\nto a project and add `Test.run` (or the alias `Test.configure`) entries.\r\n\r\n```ruby\r\n    Test.run do |r|\r\n      r.loadpath 'lib'\r\n      r.test_files << 'test/*_test.rb'\r\n    end\r\n\r\n    Test.run 'coverage' do |r|\r\n      r.loadpath 'lib'\r\n      r.test_files << 'test/*_test.rb'\r\n      r.before do\r\n        require 'simplecov'\r\n        Simplecov.setup do |s|\r\n          s.filter 'test/'\r\n          s.command_name File.basename($0)\r\n          s.coverage_dir 'log/coverage'    \r\n        end\r\n        # to ensure proper coverage\r\n        require 'myapp'\r\n      end\r\n    end\r\n```\r\n\r\nNow when `rubytest` is used the first configuration will apply. To use\r\nthe 'coverage' configuration use `-p/--profile` option.\r\n\r\n    $ rubytest -p coverage\r\n\r\nIn this manner your project can have any number of different test\r\nconfigurations, and it is easy to select between them.\r\n\r\nNote that the above example could have used `Test.configure` instead\r\nof `Test.run`. They do the same thing. But do not use `Test.run!` because\r\nthat will cause testing to be run immediately.\r\n\r\nThe configuration file can be in the `config` directory instead of `etc`, which\r\nis nice for Rails projects. But if you prefer a file in the project's root \r\nthen either `Testfile` or `.test` can be also be used instead. All of these\r\nlocations are supported simply because no one configuration convention has \r\ntaken a solid hold in the Ruby community. However, we highly recommend using\r\n`etc/test.rb`. In the end that seems like the best overall convention\r\n(and beleive me, I've analyized the hell out of every option!).\r\n\r\n\r\n## Copyrights\r\n\r\nRubytest CLI is copyrighted open-source software.\r\n\r\n    Copyright (c) 2013 Rubyworks. All rights reserved.\r\n\r\nIt is redistributable and modifiable in accordance with the terms of the\r\n[BSD-2-Clause] license.\r\n\r\nSee LICENSE.txt for the full text.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}